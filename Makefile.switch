#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# EXEFS_SRC is the optional input directory containing data copied into exefs, if anything this normally should only contain "main.npdm".
# ROMFS is the directory containing data to be added to RomFS, relative to the Makefile (Optional)
#
# NO_ICON: if set to anything, do not use icon.
# NO_NACP: if set to anything, no .nacp file is generated.
# APP_TITLE is the name of the app stored in the .nacp file (Optional)
# APP_AUTHOR is the author of the app stored in the .nacp file (Optional)
# APP_VERSION is the version of the app stored in the .nacp file (Optional)
# APP_TITLEID is the titleID of the app stored in the .nacp file (Optional)
# ICON is the filename of the icon (.jpg), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.jpg
#     - icon.jpg
#     - <libnx folder>/default_icon.jpg
#---------------------------------------------------------------------------------
TARGET		:=	shadow-warrior
BUILD		:=	build
SRCS :=	jfmact/animlib.c \
		jfmact/control.c \
		jfmact/file_lib.c \
		jfmact/keyboard.c \
		jfmact/mathutil.c \
		jfmact/mouse.c \
		jfmact/scriplib.c \
		jfmact/util_lib.c \
		src/actor.c \
		src/bunny.c \
		src/console.c \
		src/draw.c \
		src/grpscan.c \
		src/light.c \
		src/net.c \
		src/quake.c \
		src/rts.c \
		src/serp.c \
		src/sounds.c \
		src/sumo.c \
		src/vator.c \
		src/weapon.c \
		src/ai.c \
		src/cache.c \
		src/coolg.c \
		src/eel.c \
		src/hornet.c \
		src/jplayer.c \
		src/mclip.c \
		src/ninja.c \
		src/ripper2.c \
		src/saveable.c \
		src/setup.c \
		src/spike.c \
		src/swconfig.c \
		src/version.c \
		src/zilla.c \
		src/anim.c \
		src/cheats.c \
		src/coolie.c \
		src/game.c \
		src/interp.c \
		src/jsector.c  \
		src/menus.c \
		src/panel.c \
		src/ripper.c \
		src/save.c \
		src/skel.c \
		src/sprite.c \
		src/sync.c \
		src/vis.c \
		src/zombie.c \
		src/border.c \
		src/colormap.c \
		src/copysect.c \
		src/girlninj.c \
		src/interpsh.c \
		src/jweapon.c \
		src/miscactr.c \
		src/player.c \
		src/rooms.c \
		src/scrip2.c \
		src/skull.c \
		src/text.c \
		src/wallmove.c \
		src/break.c \
		src/config.c \
		src/demo.c \
		src/goro.c \
		src/inv.c \
		src/lava.c \
		src/morph.c \
		src/predict.c \
		src/rotator.c \
		src/sector.c \
		src/slidor.c \
		src/track.c \
		src/warp.c
SOURCES		:=	src jfmact
DATA		:=	data
INCLUDES	:=	jfbuild/include jfmact jfaudiolib/include src
EXEFS_SRC	:=	exefs_src
APP_TITLE	:=	Shadow Warrior NX
APP_AUTHOR	:=	aagallag
VER_MAJOR	:=	0
VER_MINOR	:=	1
VER_MICRO	:=	0
APP_VERSION	:=	$(VER_MAJOR).$(VER_MINOR).$(VER_MICRO)

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH	:=	-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE

CFLAGS	:=	-g -Wall -O2 -ffunction-sections \
			$(ARCH) $(DEFINES)

CFLAGS	+=	$(INCLUDE) -D__SWITCH__ -DUSE_OPENGL=12 -DUSE_POLYMOST=1 \
			-Wno-deprecated-declarations

CXXFLAGS	:= $(CFLAGS) -fno-rtti -fno-exceptions

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:= -ljfaudiolib -ljfbuild -lstdc++fs -lfreetype -lSDL2_ttf -lSDL2_gfx -lSDL2_image -lSDL2 -lEGL -lGLESv2 -lglapi -ldrm_nouveau -lpng -ljpeg `sdl2-config --libs` `freetype-config --libs` -lwebp -lnx -logg -lmpg123 -lmodplug -lopusfile `aarch64-none-elf-pkg-config --libs SDL2_mixer`

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(TOPDIR)/jfaudiolib $(TOPDIR)/jfbuild $(PORTLIBS) $(LIBNX)


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export REL_FNAME:= $(TARGET)_v$(VER_MAJOR).$(VER_MINOR).$(VER_MICRO).zip
export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SRCS),$(notdir $(dir)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export OFILES 	:=	$(OFILES_BIN) $(OFILES_SRC)
export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

export BUILD_EXEFS_SRC := $(TOPDIR)/$(EXEFS_SRC)

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.jpg)
	ifneq (,$(findstring $(TARGET).jpg,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).jpg
	else
		ifneq (,$(findstring icon.jpg,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.jpg
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_ICON)),)
	export NROFLAGS += --icon=$(APP_ICON)
endif

ifeq ($(strip $(NO_NACP)),)
	export NROFLAGS += --nacp=$(CURDIR)/$(TARGET).nacp
endif

ifneq ($(APP_TITLEID),)
	export NACPFLAGS += --titleid=$(APP_TITLEID)
endif

ifneq ($(ROMFS),)
	export NROFLAGS += --romfsdir=$(CURDIR)/$(ROMFS)
endif

.PHONY: $(BUILD) clean all

#---------------------------------------------------------------------------------
all: $(BUILD)

$(BUILD): lib/libjfaudiolib.a lib/jfbuild.a
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.switch

lib/libjfaudiolib.a:
	@$(MAKE) -C $(CURDIR)/jfaudiolib -f $(CURDIR)/jfaudiolib/Makefile.switch

lib/jfbuild.a:
	@$(MAKE) -C $(CURDIR)/jfbuild -f $(CURDIR)/jfbuild/Makefile.switch

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@$(MAKE) -C $(CURDIR)/jfaudiolib -f $(CURDIR)/jfaudiolib/Makefile.switch clean
	@$(MAKE) -C $(CURDIR)/jfbuild -f $(CURDIR)/jfbuild/Makefile.switch clean
	@rm -fr $(BUILD) $(TARGET).pfs0 $(TARGET).nso $(TARGET).nro $(TARGET).nacp $(TARGET).elf


#---------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
all	:	$(OUTPUT).pfs0 $(OUTPUT).nro

$(OUTPUT).pfs0	:	$(OUTPUT).nso

$(OUTPUT).nso	:	$(OUTPUT).elf

ifeq ($(strip $(NO_NACP)),)
$(OUTPUT).nro	:	$(OUTPUT).elf $(OUTPUT).nacp
else
$(OUTPUT).nro	:	$(OUTPUT).elf
endif

$(OUTPUT).elf	:	$(OFILES)

$(OFILES_SRC)	: $(HFILES_BIN)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------
